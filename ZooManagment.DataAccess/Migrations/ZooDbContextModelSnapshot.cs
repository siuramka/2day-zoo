// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZooManagment.DataAccess;

#nullable disable

namespace ZooManagment.DataAccess.Migrations
{
    [DbContext(typeof(ZooDbContext))]
    partial class ZooDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZooManagment.Domain.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EnclosureId")
                        .HasColumnType("integer");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpecieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnclosureId");

                    b.HasIndex("SpecieId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("ZooManagment.Domain.Models.Enclosure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EnclosureSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Enclosures");
                });

            modelBuilder.Entity("ZooManagment.Domain.Models.EnclosureLocationObject", b =>
                {
                    b.Property<int>("LocationObjectId")
                        .HasColumnType("integer");

                    b.Property<int>("EnclosureId")
                        .HasColumnType("integer");

                    b.HasKey("LocationObjectId", "EnclosureId");

                    b.HasIndex("EnclosureId");

                    b.ToTable("EnclosureLocationObjects");
                });

            modelBuilder.Entity("ZooManagment.Domain.Models.LocationObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LocationObjects");
                });

            modelBuilder.Entity("ZooManagment.Domain.Models.Specie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("ZooManagment.Domain.Models.Animal", b =>
                {
                    b.HasOne("ZooManagment.Domain.Models.Enclosure", "Enclosure")
                        .WithMany("Animals")
                        .HasForeignKey("EnclosureId");

                    b.HasOne("ZooManagment.Domain.Models.Specie", "Specie")
                        .WithMany()
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enclosure");

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("ZooManagment.Domain.Models.EnclosureLocationObject", b =>
                {
                    b.HasOne("ZooManagment.Domain.Models.Enclosure", "Enclosure")
                        .WithMany("EnclosureLocationObjects")
                        .HasForeignKey("EnclosureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooManagment.Domain.Models.LocationObject", "LocationObject")
                        .WithMany("EnclosureLocationObjects")
                        .HasForeignKey("LocationObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enclosure");

                    b.Navigation("LocationObject");
                });

            modelBuilder.Entity("ZooManagment.Domain.Models.Enclosure", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("EnclosureLocationObjects");
                });

            modelBuilder.Entity("ZooManagment.Domain.Models.LocationObject", b =>
                {
                    b.Navigation("EnclosureLocationObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
